//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "product")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub product_id: i64,
    #[sea_orm(unique)]
    pub product_name: String,
    pub product_description: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))")]
    pub product_price: Decimal,
    pub product_stock: i32,
    pub status: ProductStatus,
    pub product_image: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "product_status")]
pub enum ProductStatus {
    #[sea_orm(string_value = "active")]
    Active,
    #[sea_orm(string_value = "inactive")]
    Inactive,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::product_category::Entity")]
    ProductCategories,
    #[sea_orm(has_many = "super::product_region::Entity")]
    ProductRegions,
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        super::product_category::Relation::Category.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::product_category::Relation::Product.def().rev())
    }
}

impl Related<super::region::Entity> for Entity {
    fn to() -> RelationDef {
        super::product_region::Relation::Region.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::product_region::Relation::Product.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
