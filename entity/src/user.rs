//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::{ActiveValue::Set, DerivePartialModel, FromQueryResult, entity::prelude::*};
use serde::{Deserialize, Serialize};

#[derive(Serialize, DerivePartialModel, FromQueryResult)]
#[sea_orm(entity = "crate::user::Entity")]
pub struct PartialUser {
    pub id: i32,
    pub email: String,
    pub name: String,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub pid: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    #[sea_orm(unique)]
    pub api_key: String,
    pub name: String,
    pub reset_token: Option<String>,
    pub reset_sent_at: Option<DateTimeUtc>,
    pub email_verification_token: Option<String>,
    pub email_verification_sent_at: Option<DateTimeUtc>,
    pub email_verified_at: Option<DateTimeUtc>,
    pub role: UserRole,
}

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "user_role")]
pub enum UserRole {
    #[sea_orm(string_value = "user")]
    User,
    #[sea_orm(string_value = "admin")]
    Admin,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            pid: Set(Uuid::new_v4()),
            api_key: Set(Uuid::new_v4().to_string()),
            role: Set(UserRole::User),
            ..ActiveModelTrait::default()
        }
    }
}

impl From<Model> for PartialUser {
    fn from(model: Model) -> Self {
        Self {
            id: model.id,
            email: model.email,
            name: model.name,
        }
    }
}
